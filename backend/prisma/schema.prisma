// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PositionStatus {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(50)
  description String        @db.Text
  positions   Position[]
  Application Application[]

  @@map("position_status")
}

model EmploymentType {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(50)
  description String     @db.Text
  positions   Position[]

  @@map("employment_type")
}

model InterviewType {
  id          Int             @id @default(autoincrement())
  name        String          @unique @db.VarChar(50)
  description String          @db.Text
  steps       InterviewStep[]

  @@map("interview_type")
}

model Country {
  id     Int     @id @default(autoincrement())
  name   String  @unique @db.VarChar(100)
  code   String  @unique @db.Char(2)
  states State[]

  @@map("country")
}

// Estructura Geográfica
model State {
  id        Int     @id @default(autoincrement())
  countryId Int
  name      String  @db.VarChar(100)
  code      String? @db.VarChar(10)
  country   Country @relation(fields: [countryId], references: [id])
  cities    City[]

  @@unique([countryId, name])
}

model City {
  id        Int       @id @default(autoincrement())
  stateId   Int
  name      String    @db.VarChar(100)
  state     State     @relation(fields: [stateId], references: [id])
  addresses Address[]

  @@unique([stateId, name])
  @@index([name])
}

model Address {
  id          Int           @id @default(autoincrement())
  street      String        @db.VarChar(200)
  postalCode  String?       @db.VarChar(10)
  cityId      Int
  city        City          @relation(fields: [cityId], references: [id])
  contactInfo ContactInfo[]

  @@index([cityId, postalCode])
}

// Información de Contacto
model ContactInfo {
  id        Int        @id @default(autoincrement())
  email     String     @unique @db.VarChar(255)
  phone     String?    @db.VarChar(15)
  addressId Int?
  address   Address?   @relation(fields: [addressId], references: [id])
  candidate Candidate?
  company   Company?
  employee  Employee?

  @@index([phone])
  @@index([addressId])
}

// Modelos Principales
model Company {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(100)
  contactInfoId Int         @unique
  description   String?     @db.Text
  website       String?     @db.VarChar(255)
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id])
  employees     Employee[]
  positions     Position[]
}

model Employee {
  id            Int         @id @default(autoincrement())
  firstName     String      @db.VarChar(50)
  lastName      String      @db.VarChar(50)
  companyId     Int
  contactInfoId Int         @unique
  role          String      @db.VarChar(50)
  isActive      Boolean     @default(true)
  company       Company     @relation(fields: [companyId], references: [id])
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id])
  interviews    Interview[]

  @@index([companyId, isActive])
  @@index([firstName, lastName])
  @@index([role])
}

model Candidate {
  id              Int              @id @default(autoincrement())
  firstName       String           @db.VarChar(50)
  lastName        String           @db.VarChar(50)
  contactInfoId   Int              @unique
  contactInfo     ContactInfo      @relation(fields: [contactInfoId], references: [id])
  educations      Education[]
  workExperiences WorkExperience[]
  resumes         Resume[]
  applications    Application[]

  @@index([firstName, lastName])
}

// Modelos relacionados con el proceso de reclutamiento
model InterviewFlow {
  id          Int             @id @default(autoincrement())
  description String          @db.Text
  positions   Position[]
  steps       InterviewStep[]
}

model InterviewStep {
  id              Int           @id @default(autoincrement())
  interviewFlowId Int
  interviewTypeId Int
  name            String        @db.VarChar(100)
  orderIndex      Int
  interviewFlow   InterviewFlow @relation(fields: [interviewFlowId], references: [id])
  interviewType   InterviewType @relation(fields: [interviewTypeId], references: [id])
  interviews      Interview[]

  @@index([interviewFlowId, orderIndex])
  @@index([interviewTypeId])
}

model Position {
  id                 Int            @id @default(autoincrement())
  companyId          Int
  interviewFlowId    Int
  statusId           Int
  employmentTypeId   Int
  title              String         @db.VarChar(100)
  description        String         @db.Text
  locationId         Int
  salaryMin          Decimal        @db.Decimal(10,2)
  salaryMax          Decimal        @db.Decimal(10,2)
  applicationDeadline DateTime
  company            Company        @relation(fields: [companyId], references: [id])
  status             PositionStatus @relation(fields: [statusId], references: [id])
  employmentType     EmploymentType @relation(fields: [employmentTypeId], references: [id])
  interviewFlow      InterviewFlow  @relation(fields: [interviewFlowId], references: [id])
  applications       Application[]

  @@index([companyId, statusId, employmentTypeId])
  @@index([salaryMin, salaryMax])
  @@index([applicationDeadline])
  @@index([title])
  @@index([locationId])
}

model Application {
  id              Int            @id @default(autoincrement())
  positionId      Int
  candidateId     Int
  statusId        Int
  applicationDate DateTime       @default(now())
  position        Position       @relation(fields: [positionId], references: [id])
  candidate       Candidate      @relation(fields: [candidateId], references: [id])
  status          PositionStatus @relation(fields: [statusId], references: [id])
  interviews      Interview[]

  @@index([positionId, statusId, applicationDate])
  @@index([candidateId])
  @@index([applicationDate])
  @@index([statusId])
}

model Interview {
  id              Int           @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int
  interviewDate   DateTime
  result          String?       @db.VarChar(50)
  score           Int?
  notes           String?       @db.Text
  application     Application   @relation(fields: [applicationId], references: [id])
  interviewStep   InterviewStep @relation(fields: [interviewStepId], references: [id])
  employee        Employee      @relation(fields: [employeeId], references: [id])

  @@index([employeeId, result, score])
  @@index([interviewStepId, result])
  @@index([applicationId])
  @@index([interviewDate])
  @@index([score])
}

model Education {
  id          Int       @id @default(autoincrement())
  institution String    @db.VarChar(100)
  title       String    @db.VarChar(250)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId, startDate])
  @@index([institution])
  @@index([title])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([candidateId, startDate])
  @@index([company])
  @@index([position])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])

  @@index([fileType])
}
